if os.getenv("LOCAL_LUA_DEBUGGER_VSCODE") == "1" then
  require("lldebugger").start()
end
local Rope = require "Rope"
local serpent = require "serpent"

describe("A Rope should", function()
  describe("work as a set of simple segments", function()
    it("retrieve chars from a single segment", function()
      local r = Rope.new()
      r:append_segment("abc")
      assert.are.same('a', r:get_char(1))
      assert.are.same('b', r:get_char(2))
      assert.are.same('c', r:get_char(3))
      assert.are.same("abc", r:get_segment(1))
      assert.are.same("abc", r:get_segment(2))
      assert.are.same("abc", r:get_segment(3))
    end)
    it("seek between segments", function()
      local r = Rope.new()
      r:append_segment("foobar")
      r:append_segment("baz")
      assert.are.same('r', r:get_char(6))
      assert.are.same('b', r:get_char(7))
      assert.are.same("foobar", r:get_segment(6))
      assert.are.same("baz", r:get_segment(7))
    end)
    it("seek over segments", function()
      local r = Rope.new()
      r:append_segment("foobar")
      r:append_segment("baz")
      r:append_segment("zot")
      assert.are.same('r', r:get_char(6))
      assert.are.same('t', r:get_char(12))
      assert.are.same('z', r:get_char(9))
      assert.are.same('a', r:get_char(8))
      assert.are.same("foobar", r:get_segment(6))
      assert.are.same("zot", r:get_segment(12))
      assert.are.same("baz", r:get_segment(9))
      assert.are.same("baz", r:get_segment(8))
    end)
  end)
  describe("work after compaction", function()
    it("retrieve chars from a single segment", function()
      local r = Rope.new()
      r:append_segment("abc")
      r:compact()
      assert.are.same('a', r:get_char(1))
      assert.are.same('b', r:get_char(2))
      assert.are.same('c', r:get_char(3))
      assert.are.same("abc", r:get_segment(1))
      assert.are.same("abc", r:get_segment(2))
      assert.are.same("abc", r:get_segment(3))
    end)
    it("seek between segments", function()
      local r = Rope.new()
      r:append_segment("foobar")
      r:append_segment("baz")
      r:compact()
      assert.are.same('r', r:get_char(6))
      assert.are.same('b', r:get_char(7))
      assert.are.same("foobar", r:get_segment(6))
      assert.are.same("baz", r:get_segment(7))
    end)
    it("seek over segments", function()
      local r = Rope.new()
      r:append_segment("foobar")
      r:append_segment("baz")
      r:append_segment("zot")
      r:compact()
      assert.are.same('r', r:get_char(6))
      assert.are.same('t', r:get_char(12))
      assert.are.same('z', r:get_char(9))
      assert.are.same('a', r:get_char(8))
      assert.are.same("foobar", r:get_segment(6))
      assert.are.same("zot", r:get_segment(12))
      assert.are.same("baz", r:get_segment(9))
      assert.are.same("baz", r:get_segment(8))
    end)
  end)
  describe("work when appending after compaction", function()
    it("retrieve chars from a single segment", function()
      local r = Rope.new()
      r:append_segment("abc")
      r:compact()
      r:append_segment("def")
      assert.are.same('a', r:get_char(1))
      assert.are.same('b', r:get_char(2))
      assert.are.same('c', r:get_char(3))
      assert.are.same("abc", r:get_segment(1))
      assert.are.same("abc", r:get_segment(2))
      assert.are.same("abc", r:get_segment(3))
      assert.are.same('d', r:get_char(4))
      assert.are.same('e', r:get_char(5))
      assert.are.same('f', r:get_char(6))
      assert.are.same("def", r:get_segment(4))
      assert.are.same("def", r:get_segment(5))
      assert.are.same("def", r:get_segment(6))
    end)
    it("seek between segments", function()
      local r = Rope.new()
      r:append_segment("foobar")
      r:append_segment("baz")
      r:compact()
      r:append_segment("def")
      assert.are.same('r', r:get_char(6))
      assert.are.same('b', r:get_char(7))
      assert.are.same("foobar", r:get_segment(6))
      assert.are.same("baz", r:get_segment(7))
      assert.are.same('z', r:get_char(9))
      assert.are.same('d', r:get_char(10))
      assert.are.same("def", r:get_segment(11))
    end)
    it("seek over segments", function()
      local r = Rope.new()
      r:append_segment("foobar")
      r:compact()
      r:append_segment("baz")
      r:append_segment("zot")
      assert.are.same('r', r:get_char(6))
      assert.are.same('t', r:get_char(12))
      assert.are.same('z', r:get_char(9))
      assert.are.same('a', r:get_char(8))
      assert.are.same("foobar", r:get_segment(6))
      assert.are.same("zot", r:get_segment(12))
      assert.are.same("baz", r:get_segment(9))
      assert.are.same("baz", r:get_segment(8))
    end)
  end)
end)